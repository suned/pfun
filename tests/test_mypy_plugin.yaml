- case: variadic_decorators_preserve_nullary_signature
  main: |
    from pfun.maybe import maybe

    @maybe
    def f() -> int:
      pass

    reveal_type(f)  # N: Revealed type is 'def () -> Union[pfun.maybe.Nothing, pfun.maybe.Just[builtins.int*]]'
- case: variadic_decorators_preserve_unary_signature
  main: |
    from pfun.maybe import maybe

    @maybe
    def f(a: int) -> int:
      pass

    reveal_type(f)  # N: Revealed type is 'def (a: builtins.int) -> Union[pfun.maybe.Nothing, pfun.maybe.Just[builtins.int*]]'
- case: variadic_decorators_preserve_binary_signature
  main: |
    from pfun.maybe import maybe

    @maybe
    def f(a: int, b: int) -> int:
      pass

    reveal_type(f)  # N: Revealed type is 'def (a: builtins.int, b: builtins.int) -> Union[pfun.maybe.Nothing, pfun.maybe.Just[builtins.int*]]'
- case: variadic_decorators_preserve_trinary_signature
  main: |
    from pfun.maybe import maybe

    @maybe
    def f(a: int, b: int, c: int) -> int:
      pass

    reveal_type(f)  # N: Revealed type is 'def (a: builtins.int, b: builtins.int, c: builtins.int) -> Union[pfun.maybe.Nothing, pfun.maybe.Just[builtins.int*]]'
- case: curry_nullary_function
  main: |
    from pfun import curry

    @curry
    def f() -> int:
      pass

    reveal_type(f)  # N: Revealed type is 'def () -> builtins.int'
- case: curry_unary_function
  main: |
    from pfun import curry

    @curry
    def f(a: int) -> int:
      pass

    reveal_type(f)  # N: Revealed type is 'def (a: builtins.int) -> builtins.int'
- case: curry_binary_function
  main: |
    from pfun import curry

    @curry
    def f(a: int, b: int) -> int:
      pass

    reveal_type(f)  # N: Revealed type is 'Overload(def (a: builtins.int) -> def (b: builtins.int) -> builtins.int, def (a: builtins.int, b: builtins.int) -> builtins.int)'
- case: curry_trinary_function
  main: |
    from pfun import curry

    @curry
    def f(a: int, b: int, c: int) -> int:
      pass

    reveal_type(f)  # N: Revealed type is 'Overload(def (a: builtins.int) -> def (b: builtins.int) -> def (c: builtins.int) -> builtins.int, def (a: builtins.int, b: builtins.int, c: builtins.int) -> builtins.int)'
- case: curry_generic_function
  main: |
    from typing import TypeVar, Union

    from pfun import curry

    A = TypeVar('A')
    B = TypeVar('B')

    @curry
    def f(a: A, b: B) -> Union[A, B]:
      ...

    reveal_type(f(1))  # N: Revealed type is 'def [B] (b: B`-2) -> Union[builtins.int*, B`-2]'
    reveal_type(f(1)(''))  # N: Revealed type is 'Union[builtins.int, builtins.str*]'
- case: curry_optional_and_variadic
  main: |
    from typing import TypeVar
    from pfun import curry

    T1 = TypeVar('T1')
    T2 = TypeVar('T2')
    T3 = TypeVar('T3')

    @curry
    def f(pos_1: T2, pos_2: T2, *args: T3, keyword: T1 = None, **kwargs: T2) -> T3:
      ...

    reveal_type(f)  # N: Revealed type is 'Overload(def [T2] (pos_1: T2`-1) -> def [T3] (pos_2: T2`-1, *args: T3`-2) -> T3`-2, def [T2, T3, T1] (pos_1: T2`-1, pos_2: T2`-1, *args: T3`-2, *, keyword: Union[T1`-3, None] =, **kwargs: T2`-1) -> T3`-2, def [T1, T2] (*, keyword: Union[T1`-3, None] =, **kwargs: T2`-1) -> def (pos_1: T2`-1) -> def [T3] (pos_2: T2`-1, *args: T3`-2) -> T3`-2)'
- case: curry_optional_only
  main: |
    from pfun import curry

    @curry
    def f(a: str = '', b: str = '') -> str:
      pass

    reveal_type(f)  # N: Revealed type is 'def (a: builtins.str =, b: builtins.str =) -> builtins.str'
- case: compose_simple_functions
  main: |
    from pfun import compose

    def f(a: str) -> int:
      pass

    def g(a: int) -> float:
      pass

    reveal_type(compose(g, f))  # N: Revealed type is 'def (builtins.str*) -> builtins.float*'
- case: immutable_has_correct_constructor
  main: |
    from pfun import Immutable

    class C(Immutable):
      field: int

    C()  # E: Missing positional argument "field" in call to "C"
- case: cant_set_immutable_attribute
  main: |
    from pfun import Immutable

    class C(Immutable):
      field: int

    c = C(1)
    c.field = 2  # E: Property "field" defined in "C" is read-only

    class D(C):
      other_field: str

    d = D(1, '')
    d.field = 2  # E: Property "field" defined in "D" is read-only
- case: effect_and_then_combines_protocols
  main: |
    from typing_extensions import Protocol
    from typing import NoReturn
    from pfun.effect import Effect


    class P1(Protocol):
      p1_attr: str

    class P2(Protocol):
      p2_attr: int

    e1: Effect[P1, NoReturn, str]
    e2: Effect[P2, NoReturn, int]
    reveal_type(e1.and_then(lambda _: e2))  # N: Revealed type is 'pfun.effect.Effect[pfun.Intersection[main.P1, main.P2], <nothing>, builtins.int*]'
- case: effect_and_then_combines_protocols_variadically
  main: |
    from typing import NoReturn
    from typing_extensions import Protocol
    from pfun.effect import Effect

    class P1(Protocol):
      p1_attr: str

    class P2(Protocol):
      p2_attr: int

    class P3(Protocol):
      p3_attr: float

    e1: Effect[P1, NoReturn, str]
    e2: Effect[P2, NoReturn, int]
    e3: Effect[P3, NoReturn, float]
    reveal_type(e1.and_then(lambda _: e2).and_then(lambda _: e3))  # N: Revealed type is 'pfun.effect.Effect[pfun.Intersection[main.P1, main.P2, main.P3], <nothing>, builtins.float*]'
    reveal_type(e1.and_then(lambda _: e2.and_then(lambda _: e3)))  # N: Revealed type is 'pfun.effect.Effect[pfun.Intersection[main.P1, main.P2, main.P3], <nothing>, builtins.float*]'
- case: effect_and_then_combines_protocols_for_type_aliases
  main: |
    from typing_extensions import Protocol
    from pfun import Depends, Success

    class P1(Protocol):
      p1_attr: str

    e1: Depends[P1, str]
    e2: Success[str]

    reveal_type(e1.and_then(lambda _: e2))  # N: Revealed type is 'pfun.effect.Effect[main.P1, <nothing>, builtins.str*]'
- case: effect_and_then_does_not_combine_non_protocols
  main: |
    from typing import NoReturn
    from pfun.effect import Effect

    e1: Effect[int, NoReturn, str]
    e2: Effect[str, NoReturn, int]

    reveal_type(e1.and_then(lambda _: e2))  # N: Revealed type is 'pfun.effect.Effect[Any, <nothing>, builtins.int*]'
- case: effect_discard_and_then_combines_protocols
  main: |
    from typing_extensions import Protocol
    from typing import NoReturn
    from pfun.effect import Effect


    class P1(Protocol):
      p1_attr: str

    class P2(Protocol):
      p2_attr: int

    e1: Effect[P1, NoReturn, str]
    e2: Effect[P2, NoReturn, int]
    reveal_type(e1.discard_and_then(e2))  # N: Revealed type is 'pfun.effect.Effect[pfun.Intersection[main.P1, main.P2], <nothing>, builtins.int*]'
- case: effect_ensure_combines_protocols
  main: |
    from typing_extensions import Protocol
    from typing import NoReturn
    from pfun.effect import Effect


    class P1(Protocol):
      p1_attr: str

    class P2(Protocol):
      p2_attr: int

    e1: Effect[P1, NoReturn, str]
    e2: Effect[P2, NoReturn, int]
    reveal_type(e1.ensure(e2))  # N: Revealed type is 'pfun.effect.Effect[pfun.Intersection[main.P1, main.P2], <nothing>, builtins.str*]'
- case: effect_recover_combines_protocols
  main: |
    from typing_extensions import Protocol
    from typing import NoReturn
    from pfun.effect import Effect


    class P1(Protocol):
      p1_attr: str

    class P2(Protocol):
      p2_attr: int

    e1: Effect[P1, ValueError, str]
    e2: Effect[P2, NoReturn, str]
    reveal_type(e1.recover(lambda _: e2))  # N: Revealed type is 'pfun.effect.Effect[pfun.Intersection[main.P1, main.P2], <nothing>, builtins.str]'
- case: effect_recover_does_not_combine_non_protocols
  main: |
    from typing import NoReturn
    from pfun.effect import Effect

    e1: Effect[int, ValueError, str]
    e2: Effect[str, NoReturn, str]

    reveal_type(e1.recover(lambda _: e2))  # N: Revealed type is 'pfun.effect.Effect[Any, <nothing>, builtins.str]'
- case: effect_combine_checks_args
  main: |
    from typing import Any, NoReturn
    from pfun.effect import success, combine, Effect

    def f(a: int, b: int) -> str:
      pass

    combine(success(''), success(''))(f)  # E: Argument 1 has incompatible type "Callable[[int, int], str]"; expected "Callable[[str, str], str]"
- case: effect_combine_combines_protocols
  main: |
    from typing_extensions import Protocol
    from typing import NoReturn
    from pfun.effect import Effect, combine


    class P1(Protocol):
      p1_attr: str

    class P2(Protocol):
      p2_attr: int

    e1: Effect[P1, NoReturn, str]
    e2: Effect[P2, NoReturn, str]

    def f(a: str, b: str) -> str:
      pass

    reveal_type(combine(e1, e2)(f))  # N: Revealed type is 'pfun.effect.Effect[pfun.Intersection[main.P1, main.P2], <nothing>, builtins.str*]'
- case: effect_combine_unions_errors
  main: |
    from typing import Any
    from pfun.effect import Effect, combine

    e1: Effect[Any, ValueError, str]
    e2: Effect[Any, IOError, str]

    def f(a: str, b: str) -> str:
      pass

    reveal_type(combine(e1, e2)(f))  # N: Revealed type is 'pfun.effect.Effect[Any, Union[builtins.OSError, builtins.ValueError], builtins.str*]'
- case: effect_lift_checks_arguments
  main: |
    from pfun.effect import lift, success

    def add(a: int, b: int) -> int:
      return a + b

    lift(add)(success(''), success(''))  # E: Argument 1 to "success" has incompatible type "str"; expected "int"
- case: effect_lift_handles_generics
  main: |
    from typing import TypeVar
    from pfun.effect import lift, success

    A = TypeVar('A')

    def f(v: A) -> A:
      ...

    reveal_type(lift(f)(success('')))  # N: Revealed type is 'pfun.effect.Effect[builtins.object, <nothing>, builtins.str*]'
- case: effect_lift_infers_return_type
  main: |
    from typing_extensions import Protocol
    from pfun.effect import lift, Effect

    class P1(Protocol):
      p1_attr: str

    class P2(Protocol):
      p2_attr: int

    def f(a: int, b: int) -> int:
      ...

    e1: Effect[P1, ZeroDivisionError, int]
    e2: Effect[P2, KeyError, int]
    reveal_type(lift(f)(e1, e2))  # N: Revealed type is 'pfun.effect.Effect[pfun.Intersection[main.P1, main.P2], Union[builtins.KeyError, builtins.ZeroDivisionError], builtins.int]'
- case: effect_catch_one_error
  main: |
    from pfun.effect import catch

    def f(a: str) -> int:
      ...

    reveal_type(catch(Exception)(f))  # N: Revealed type is 'def (a: builtins.str) -> pfun.effect.Effect[builtins.object, builtins.Exception, builtins.int]'
- case: effect_catch_unions_errors
  main: |
    from pfun.effect import catch


    def f(a: str) -> int:
      pass


    reveal_type(catch(ValueError, TypeError)(f))  # N: Revealed type is 'def (a: builtins.str) -> pfun.effect.Effect[builtins.object, Union[builtins.ValueError, builtins.TypeError], builtins.int*]'
- case: effect_cpu_bound_fails_with_async_function
  main: |
    from pfun.effect import cpu_bound

    async def f() -> int:
      ...

    cpu_bound(f)  # E: Function arguments to 'pfun.effect.cpu_bound' can't be async
- case: effect_io_bound_fails_with_async_function
  main: |
    from pfun.effect import io_bound

    async def f() -> int:
      ...

    io_bound(f)  # E: Function arguments to 'pfun.effect.io_bound' can't be async
